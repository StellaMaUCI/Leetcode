"""
Given a string s, return the longest palindromic substring in s. 
Expand from centers: O(n^2), O(1)
"""

class Solution:  
    def longestPalindrome(self, s):
        self.maxlen = 0
        self.start = 0    
                
        for i in range(len(s)):
            self.expandFromCenter(s,i,i)
            self.expandFromCenter(s,i,i+1)
        return s[self.start: self.start + self.maxlen]  # 结果为start到start+max部分，左闭右开，即使右边是最后一位+1时也不报错

    def expandFromCenter(self,s,l,r):
        while l >= 0 and r < len(s) and s[l] == s[r]: #当s[r]的r是最后一位+1时，因为r<len(s)到不了此判断，所以不报错
            l -= 1
            r += 1

        if self.maxlen < r-l-1:  # r-l-1代表当前找到的回文部分
            self.maxlen = r-l-1  # 若max比当前找到的回文部分小，更新max
            self.start = l + 1   # l下一个字母作为新的start


class Solution: # O(n)
    def longestPalindrome(self, s: str) -> str:
        # 不管s是奇偶，t一定是奇数长度
        t = '#' + '#'.join(s) + '#'
        n = len(t)
        p = [0] * n  # p[i] = radius of palindrome centered at i
        center = right = 0
        max_len = max_center = 0

        # 找对称点的半径值作为i点半径值，但是不能大于i到右边界距离
        for i in range(n):
            mirror = 2 * center - i
            if i < right:
                p[i] = min(right - i, p[mirror])

            # Try to expand around center i
            a = i + p[i] + 1
            b = i - p[i] - 1
            while a < n and b >= 0 and t[a] == t[b]:
                p[i] += 1
                a += 1
                b -= 1

            # Update center and right boundary
            if i + p[i] > right:
                center = i
                right = i + p[i]

            # Track the maximum length and its center
            if p[i] > max_len:
                max_len = p[i]
                max_center = i

        # Extract the actual palindrome from the original string
        start = (max_center - max_len) // 2
        return s[start:start + max_len]
            
        
class Solution {
    private int start, maxLen;
    public String longestPalindrome(String s) {
        if (s.length() == 1) {  //java 需要有corner case，s只有一位的时候过不了，因为下面i < s.length()-1
            return s;
        }
        
        for (int i = 0; i < s.length()-1; i++) {
            expandFromCenter(s, i, i);  //assume odd length, try to extend Palindrome as possible
            expandFromCenter(s, i, i+1); //assume even length.
        }
        return s.substring(start, start + maxLen);
    }

    private void expandFromCenter(String s, int l, int r) {
        while (l >= 0 && r < s.length() && s.charAt(l) == s.charAt(r)) {
            l--;
            r++;
        }
        if (maxLen < r - l - 1) { //r-l-1代表当前找到的回文部分
            start = l + 1;      // l下一个字母作为新的start
            maxLen = r - l - 1; //若max比当前找到的回文部分小，更新max
        }
    }
}
