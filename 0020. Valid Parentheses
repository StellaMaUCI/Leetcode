'''Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 
Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false
 
Constraints:
1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

class Solution:
    def isValid(self, s: str) -> bool:
        dic = {")": "(", "}": "{", "]": "["}
        stack = []
 
        for b in s:
            # 栈非空且为闭括号，且与栈顶括号匹配
            if stack and b in dic.keys() and dic[b] == stack[-1]:
                stack.pop()
            else: # 其他全部压入栈，因为本题说明了测试全部是括号
                stack.append(b)
        return not stack


class Solution:
    def isValid(self, s: str) -> bool:
        dict = {")":"(", "]":"[", "}":"{"}
        stack = []
        for b in s:
            if stack and b in dict and dict[b] == stack[-1]:
                stack.pop()
            else:
                stack.append(b)
        return not stack


class Solution {
  private HashMap<Character, Character> mappings;

  public Solution() {
    this.mappings = new HashMap<Character, Character>();
    this.mappings.put(')', '(');
    this.mappings.put('}', '{');
    this.mappings.put(']', '[');
  }
    public boolean isValid(String s) {
        Stack<Character>stack = new Stack<Character>();
        
        for (int i=0; i< s.length(); i++){
            char c = s.charAt(i);
            if (this.mappings.containsKey(c)) {
                char top = stack.empty()?'#':stack.pop();
                if (top != this.mappings.get(c)) {
                    return false;
                }
            }else{
                stack.push(c);
            }
        }
          return stack.isEmpty();  
    }
}
 
 # This is wrong, it garantee open and close numbers are same, but can't garantee they match
 class Solution:
    def isValid(self, s: str) -> bool:
        counter = 0;
        for i in s: 
             if(i == '(' or '['  or '{'):
                counter+=1;
             elif(i == ')' or ']'  or '}'):    
                counter-=1;
        return counter
